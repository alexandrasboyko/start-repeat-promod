"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGreaterThan = exports.isLessThan = void 0;
const error_1 = require("./error");
const utils_1 = require("./utils");
const sat_utils_1 = require("sat-utils");
const assertions_utils_1 = require("./assertions.utils");
function isGreaterThan(expected, actual, message = '', _isSoft = false) {
    let resulter;
    message = message ? message : utils_1.buildDefaultMessage('to be greater than', expected, actual);
    try {
        if (!sat_utils_1.isNumber(expected)) {
            throw new TypeError(utils_1.buildTypeErrorMessage('number', expected));
        }
        if (!sat_utils_1.isNumber(actual)) {
            throw new TypeError(utils_1.buildTypeErrorMessage('number', actual));
        }
        if (!(expected > actual)) {
            throw new error_1.AssertionError({ message: `${message}`, expected, actual });
        }
    }
    catch (error) {
        resulter = error;
    }
    assertions_utils_1.postAssertCall(resulter, message, expected, _isSoft);
}
exports.isGreaterThan = isGreaterThan;
function isLessThan(expected, actual, message = '', _isSoft = false) {
    let resulter;
    message = message ? message : utils_1.buildDefaultMessage('to be less than', expected, actual);
    try {
        if (!sat_utils_1.isNumber(expected)) {
            throw new TypeError(utils_1.buildTypeErrorMessage('number', expected));
        }
        if (!sat_utils_1.isNumber(actual)) {
            throw new TypeError(utils_1.buildTypeErrorMessage('number', actual));
        }
        if (!(expected < actual)) {
            throw new error_1.AssertionError({ message: `${message}`, expected, actual });
        }
    }
    catch (error) {
        resulter = error;
    }
    assertions_utils_1.postAssertCall(resulter, message, expected, _isSoft);
}
exports.isLessThan = isLessThan;
//# sourceMappingURL=type.number.asssertions.js.map