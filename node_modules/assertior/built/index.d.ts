import { AssertionError } from './error';
interface IStepDeclarator {
    (stepAssertionName: string, error: any, expected: any, actual: any): any;
}
declare function initStepDeclarator(stepDeclarator: IStepDeclarator): void;
interface IAssetionList {
    toEqual(actual: any, message?: string): any;
    toNotEqual(actual: any, message?: string): any;
    toDeepEqual(actual: any, message?: string): any;
    toNotDeepEqual(actual: any, message?: string): any;
    toBeEmptyArray(message?: string): any;
    toBeNotEmptyArray(message?: string): any;
    objectIsNotEmpty(message?: string): any;
    objectIsEmpty(message?: string): any;
    stringIsEmpty(message?: string): any;
    stringIsNotEmpty(message?: string): any;
    hasType(expectedType: any, toEqualMessage?: string): any;
    objectIncludesKeys(keysList: string[], message?: string): any;
    stringIncludesSubstring(subString: string, message?: string): any;
    stringNotIncludesSubstring(subString: string, message?: string): any;
    isLessThan(actual: any, message?: string): any;
    isGreaterThan(actual: any, message?: string): any;
    toMatchRegex(actual: RegExp, message?: string): any;
    arrayIncludesMembers(actual: any | any[], message?: string): any;
    arrayNotIncludesMembers(actual: any | any[], message?: string): any;
    arrayHasLengthAbove(actual: number, message?: string): any;
    toExist: any;
    toBeString: any;
    toBeObject: any;
    toBeNull: any;
    toBeNumber: any;
    toBeUndefined: any;
    toBeSet: any;
    toBeFunction: any;
    toBeAsyncFunction: any;
    toBePromise: any;
    toBeBool: any;
    toBeSymbol: any;
    toBeArray: any;
}
interface IExpectation {
    soft(expected: any, message?: string): IAssetionList;
    (expected: any, message?: any): IAssetionList;
}
declare const expect: IExpectation;
export { expect, initStepDeclarator, AssertionError };
