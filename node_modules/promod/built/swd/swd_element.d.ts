import { By, WebElement, WebDriver } from 'selenium-webdriver';
declare class PromodSeleniumElements {
    private seleniumDriver;
    private selector;
    private wdElements;
    private getParent;
    private getExecuteScriptArgs;
    parentSelector: string;
    constructor(selector: any, client: any, getParent?: any, getExecuteScriptArgs?: any);
    setseleniumDriver(client: WebDriver): void;
    get(index: any): PromodSeleniumElementType;
    last(): PromodSeleniumElementType;
    first(): PromodSeleniumElementType;
    private getElement;
    getIds(): Promise<any[]>;
    getSeleniumProtocolElementObj(): Promise<{
        'element-6066-11e4-a52e-4f735466cecf': any;
        ELEMENT: any;
    }[]>;
    each(cb: (item: PromodSeleniumElementType, index?: number) => Promise<void>): Promise<any>;
    count(): Promise<number>;
}
declare class PromodSeleniumElement {
    private seleniumDriver;
    private selector;
    private wdElement;
    private getParent;
    private getExecuteScriptArgs;
    private useParent;
    parentSelector: string;
    constructor(selector: any, client: any, getParent?: any, getExecuteScriptArgs?: any, useParent?: any);
    setseleniumDriver(client: any): void;
    $(selector: any): PromodSeleniumElementType;
    $$(selector: any): PromodSeleniumElementsType;
    getSeleniumProtocolElementObj(): Promise<{
        'element-6066-11e4-a52e-4f735466cecf': any;
        ELEMENT: any;
    }>;
    /**
     * @param {boolean} [withScroll] try to prevent intercept error by scoll to bottom/to
     * @returns {Promise<void>}
     */
    click(withScroll?: boolean): Promise<void>;
    scrollIntoView(position?: 'end' | 'start'): Promise<void>;
    getElement(): Promise<WebElement>;
    /**
     * @returns {Promise<boolean>} button is present
     * @example
     * const button = $('button')
     * const buttonIsDisplayed = await button.isDisplayed();
     */
    isDisplayed(): Promise<boolean>;
    /**
     * @returns {Promise<boolean>} button is present
     * @example
     * const button = $('button')
     * const buttonIsPresent = await button.isPresent();
     */
    isPresent(): Promise<boolean>;
    private callElementAction;
    getId(): Promise<any>;
    getWebDriverElement(): Promise<WebElement>;
    locator(): {
        value: string;
    };
    private isInteractionIntercepted;
}
declare const $: (selector: string | Promise<any> | By | ((...args: any[]) => any), root?: PromodSeleniumElementType | any, ...rest: any[]) => PromodSeleniumElementType;
declare const $$: (selector: string | Promise<any> | By | ((...args: any[]) => any), root?: PromodSeleniumElementType | any, ...rest: any[]) => PromodSeleniumElementsType;
export { $, $$, PromodSeleniumElement, PromodSeleniumElements, By };
export interface PromodSeleniumElementsType {
    wdElements: WebElement[];
    get(index: number): PromodSeleniumElementType;
    last(): PromodSeleniumElementType;
    first(): PromodSeleniumElementType;
    each(cb: (item: PromodSeleniumElementType, index?: number) => Promise<void>): Promise<void>;
    count(): Promise<number>;
}
export interface PromodSeleniumElementType {
    wdElement: WebElement;
    getId(): Promise<string>;
    click(withScroll?: boolean): Promise<void>;
    sendKeys(...keys: Array<string | number | Promise<string | number>>): Promise<void>;
    getTagName(): Promise<string>;
    getCssValue(cssStyleProperty: string): Promise<string>;
    getAttribute(attributeName: string): Promise<string>;
    getText(): Promise<string>;
    getSize(): Promise<{
        width: number;
        height: number;
    }>;
    getRect(): Promise<{
        x: number;
        y: number;
        width: number;
        height: number;
    }>;
    getLocation(): Promise<{
        x: number;
        y: number;
    }>;
    $(selector: string | By | ((...args: any[]) => any) | Promise<any>): PromodSeleniumElementType;
    $$(selector: string | By | ((...args: any[]) => any) | Promise<any>): PromodSeleniumElementsType;
    isEnabled(): Promise<boolean>;
    isSelected(): Promise<boolean>;
    isPresent(): Promise<boolean>;
    submit(): Promise<void>;
    clear(): Promise<void>;
    isDisplayed(): Promise<boolean>;
    takeScreenshot(opt_scroll?: boolean): Promise<string>;
    getWebDriverElement(): Promise<WebElement>;
    scrollIntoView(position?: boolean | string): Promise<void>;
}
