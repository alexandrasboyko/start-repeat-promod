declare function sleep(millisecond?: number): Promise<void>;
interface IWaiterOpts {
    timeout?: number;
    interval?: number;
    dontThrow?: boolean;
    message?: string;
    throwCustom?: () => any;
    createMessage?: (...args: any[]) => string;
    analyseResult?: (...args: any[]) => boolean | Promise<boolean>;
    waiterError?: new (...args: any[]) => any;
}
declare function waitForCondition(callback: any, options?: IWaiterOpts): Promise<any>;
declare namespace waitForCondition {
    var setDefaultOpts: (opts: IWaiterOpts) => void;
}
export { waitForCondition, sleep };
