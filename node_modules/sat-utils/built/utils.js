"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettifyCamelCase = exports.shuffleArr = exports.toArray = exports.getRandomArrayItem = exports.getRandomString = void 0;
const types_1 = require("./types");
const getStr = (str, length) => {
    return Array.from({ length })
        .map(() => str.charAt(Math.floor(Math.random() * str.length)))
        .join('');
};
function getRandomString(length, options = {}) {
    const l = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    const s = '!@#$%^&*(((()))_+~?>"|\\}{[]';
    const n = '01234567890';
    const ln = l + n;
    const lns = l + s + n;
    if (!types_1.isNumber(length)) {
        throw new Error(`getRandomString(): first argument should be a number, current arg is ${types_1.getType(length)}`);
    }
    if (!types_1.isObject(options)) {
        throw new Error(`getRandomString(): second argument should be an object, current arg is ${types_1.getType(options)}`);
    }
    const { lowerCase, ...restOpts } = options;
    const data = {
        letters: l,
        numbers: n,
        lettersAndNumbers: ln,
        symbols: s,
        lettersNumbersAndSymbols: lns,
    };
    const optsKeys = Object.keys(restOpts);
    if (optsKeys.length && !data[optsKeys[0]]) {
        throw new Error(`getRandomString(): second argument should be an object with next opts
      numbers?: boolean;
      lettersAndNumbers?: boolean;
      symbols?: boolean;
      lettersNumbersAndSymbols?: boolean;
    `);
    }
    const charsKey = optsKeys[0] || 'letters';
    const randomStr = getStr(data[charsKey], length);
    return lowerCase ? randomStr.toLowerCase() : randomStr;
}
exports.getRandomString = getRandomString;
function getRandomArrayItem(itemsList, quaintity = 1) {
    if (!Array.isArray(itemsList)) {
        throw new TypeError(`getRandomArrayItem(): first argument should be an array, current arg is ${types_1.getType(itemsList)}`);
    }
    if (!itemsList.length) {
        throw new RangeError(`getRandomArrayItem(): given array is empty`);
    }
    if (quaintity > itemsList.length) {
        throw new RangeError(`getRandomArrayItem(): more elements taken: ${quaintity} than exist within the given array. Array length ${itemsList.length}`);
    }
    return quaintity > 1
        ? [...itemsList].sort(() => 0.5 - Math.random()).slice(0, quaintity)
        : itemsList[Math.floor(Math.random() * itemsList.length)];
}
exports.getRandomArrayItem = getRandomArrayItem;
function toArray(anyArugment) {
    if (anyArugment === undefined) {
        return [];
    }
    return Array.isArray(anyArugment) ? Array.from(anyArugment) : [anyArugment];
}
exports.toArray = toArray;
function shuffleArr(arr) {
    if (!Array.isArray(arr)) {
        throw new TypeError(`shuffleArr(): first argument should be an array, current arg is ${types_1.getType(arr)}`);
    }
    const newArr = Array.from(arr);
    for (let i = newArr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArr[i], newArr[j]] = [newArr[j], newArr[i]];
    }
    return newArr;
}
exports.shuffleArr = shuffleArr;
function prettifyCamelCase(camelCaseString) {
    if (!types_1.isString(camelCaseString)) {
        throw new TypeError(`prettifyCamelCase(): first argument should be a striung, current arg is ${types_1.getType(camelCaseString)}`);
    }
    let humanReadableString = '';
    for (let index = 0; index < camelCaseString.length; index++) {
        const char = camelCaseString.charAt(index);
        if (index === 0) {
            humanReadableString += char.toUpperCase();
        }
        else if (char !== char.toLowerCase() && char === char.toUpperCase()) {
            humanReadableString += ` ${char}`;
        }
        else {
            humanReadableString += char;
        }
    }
    return humanReadableString;
}
exports.prettifyCamelCase = prettifyCamelCase;
//# sourceMappingURL=utils.js.map