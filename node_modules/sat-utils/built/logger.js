"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLogLevel = exports.colors = exports.logger = void 0;
/* eslint-disable no-console */
const listOfColors = {
    Reset: '\x1b[0m',
    Bright: '\x1b[1m',
    Dim: '\x1b[2m',
    Underscore: '\x1b[4m',
    Blink: '\x1b[5m',
    Reverse: '\x1b[7m',
    Hidden: '\x1b[8m',
    FgBlack: '\x1b[30m',
    FgRed: '\x1b[31m',
    FgGreen: '\x1b[32m',
    FgYellow: '\x1b[33m',
    FgBlue: '\x1b[34m',
    FgMagenta: '\x1b[35m',
    FgCyan: '\x1b[36m',
    FgWhite: '\x1b[37m',
    BgBlack: '\x1b[40m',
    BgRed: '\x1b[41m',
    BgGreen: '\x1b[42m',
    BgYellow: '\x1b[43m',
    BgBlue: '\x1b[44m',
    BgMagenta: '\x1b[45m',
    BgCyan: '\x1b[46m',
    BgWhite: '\x1b[47m',
};
function wrapInGreen(txt) {
    return `\u001b[34m${txt}\u001b[0m`;
}
function wrapInRed(txt) {
    return `\u001b[31m${txt}\u001b[0m`;
}
function wrapInBlue(txt) {
    return `\u001b[34m${txt}\u001b[0m`;
}
function wrapInYellow(txt) {
    return `\u001b[33m${txt}\u001b[0m`;
}
function wrapInMagenta(txt) {
    return `\x1b[35m${txt}\u001b[0m`;
}
const colors = {
    red: (text) => wrapInRed(text),
    magenta: (text) => wrapInMagenta(text),
    green: (text) => wrapInGreen(text),
    yellow: (text) => wrapInYellow(text),
    blue: (text) => wrapInBlue(text)
};
exports.colors = colors;
const logger = {
    // 'ERROR' | 'WARN' | 'INFO' | 'VERBOSE';
    logLevel: 'ERROR',
    log(...args) {
        if (this.logLevel === 'VERBOSE') {
            console.log(colors.green('LOG: '), ...args);
        }
    },
    info(...args) {
        if (this.logLevel === 'VERBOSE' || this.logLevel === 'INFO') {
            console.info(colors.yellow('INFO: '), ...args);
        }
    },
    warn(...args) {
        if (this.logLevel === 'VERBOSE' || this.logLevel === 'INFO' || this.logLevel === 'WARN') {
            console.warn(colors.magenta('WARNING: '), ...args);
        }
    },
    error(...args) {
        if (this.logLevel === 'VERBOSE' || this.logLevel === 'INFO' || this.logLevel === 'WARN' || this.logLevel === 'ERROR') {
            console.error(colors.red('ERROR: '), ...args);
        }
    },
    setLogLevel(level) {
        this.logLevel = level;
    },
    addCustomLevel(loggerDescription, logLevel, description, consoleOutput = 'log', color = 'FgWhite') {
        logger[loggerDescription] = (...args) => {
            if (logger.logLevel === logLevel) {
                console[consoleOutput](`${listOfColors[color]}${description}${listOfColors.Reset}`, ...args);
            }
        };
    }
};
exports.logger = logger;
function setLogLevel(level) {
    logger.setLogLevel(level);
}
exports.setLogLevel = setLogLevel;
//# sourceMappingURL=logger.js.map